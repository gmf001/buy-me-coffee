import Head from 'next/head';
import Image from 'next/image';
import cn from 'clsx';
import { useRouter } from 'next/router';
import { Inter } from '@next/font/google';
import { useState } from 'react';
import { DONATION_IN_CENTS, MAX_DONATION_IN_CENTS } from '@/config';
import { GetServerSidePropsContext } from 'next';
import { Record } from '@/types';

const inter = Inter({ subsets: ['latin'] });

export default function Home({ donations = [] }: { donations: Array<Record> }) {
	const router = useRouter();

	const [error, setError] = useState(null);
	const [qty, setQty] = useState(1);
	const [name, setName] = useState('');
	const [message, setMessage] = useState('');

	const presets = [1, 3, 5];

	const handleCheckout = async () => {
		setError(null);

		const response = await fetch('/api/checkout', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				name,
				message,
				quantity: qty
			})
		});

		const res = await response.json();

		if (res.url) {
			router.push(res.url);
		} else {
			setError(res.error);
			return;
		}
	};

	return (
		<>
			<Head>
				<title>Buy Me A Coffee</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main
				className={cn(inter.className, 'flex max-w-3xl mx-auto my-8 gap-x-12')}>
				<div className='flex-grow space-y-4'>
					<h2 className='font-semibold text-lg'>Previous donations</h2>
					{donations.map((donation) => (
						<div className='p-4 shadow mb-2' key={donation.id}>
							{donation.fields.name} donated {donation.fields.amount} coffee(s)
							<br />
							{donation.fields.message}
						</div>
					))}
				</div>

				<div className='space-y-6'>
					<h2 className='font-bold uppercase text-xl'>Buy me a Coffee</h2>

					{error && (
						<div
							className='bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative'
							role='alert'>
							<span className='block sm:inline'>{error}</span>
						</div>
					)}

					<div className='flex items-center w-full space-x-2'>
						<Image src='/coffee.png' alt='coffee' height={100} width={50} />
						<span>x</span>
						{presets.map((preset) => (
							<button
								className='bg-blue-500 hover:bg-blue-400 px-4 py-2 text-white rounded'
								onClick={() => setQty(preset)}
								key={preset}>
								{preset}
							</button>
						))}

						<input
							className='shadow-sm appearance-none border rounded w-full py-2.5 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500 text-sm'
							type='number'
							value={qty}
							onChange={(e) => setQty(parseFloat(e.target.value))}
							min={1}
							max={MAX_DONATION_IN_CENTS / DONATION_IN_CENTS}
						/>
					</div>

					<div className='mb-2 w-full space-y-1'>
						<label className='block text-gray-700 text-sm' htmlFor='name'>
							Name (optional)
						</label>
						<input
							className='shadow-sm appearance-none border rounded w-full py-2.5 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-sm focus:border-blue-500'
							type='text'
							id='name'
							placeholder='John Doe'
							onChange={(e) => setName(e.target.value)}
							value={name}
						/>
					</div>

					<div className='mb-2 w-full space-y-1'>
						<label className='block text-gray-700 text-sm' htmlFor='message'>
							Message
						</label>
						<textarea
							className='shadow-sm appearance-none border rounded w-full py-2.5 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500 text-sm'
							rows={4}
							placeholder='Add a message to your donation'
							id='message'
							onChange={(e) => setMessage(e.target.value)}
							value={message}
						/>
					</div>

					<button
						onClick={handleCheckout}
						className='bg-blue-500 rounded px-4 py-2.5 text-white'>
						Donate ${qty * (DONATION_IN_CENTS / 100)}
					</button>
				</div>
			</main>
		</>
	);
}

export async function getServerSideProps({ req }: GetServerSidePropsContext) {
	const response = await fetch(`${req.headers.referer}api/donations`);
	const donations = await response.json();

	return {
		props: {
			donations
		}
	};
}
